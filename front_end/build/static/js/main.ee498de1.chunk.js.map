{"version":3,"sources":["ClassNames.js","TestCal.js","scroller.js","App.js"],"names":["ClassNames","TestCal","props","startTime","moment","h","m","endTime","scaleHeaderTitle","numberOfDays","scaleUnit","firstDay","day","dayFormat","useModal","selectedIntervals","this","onEventClick","handleEvClick","React","Component","buttonStyle","padding","right","scrollerboxes","borderRadius","height","margin","spacingStyle","animatedComponents","makeAnimated","Scroller","fetchClassData","classname","a","fetch","then","res","json","componentDidMount","state","CurrentSubj","SelectedClass","handleDisplay","section","real_openclose","index","findIndex","sec","class_no","open_display","open_seats","disp_obj","thurs","formatTime","unformattedTime","start","substr","indexOf","end","split","console","log","start_hour","start_min","end_hour","end_min","ampm","slice","includes","hour","parseInt","start_obj","end_obj","formatDays","unformattedDays","days","push","handleScheduling","selected_list","innerobj","class_arr","i","length","addAllIntervals","unformattedIntervals","class_name","class_type","interval_arr_out","interval_arr_in","no_days","no_time","j","check_conflicts","start_time1","end_time1","start_time2","end_time2","mom","extendMoment","Moment","date1","date2","range1","range","range2","overlaps","update_selectedIntervals","all_schedules","interval_obj","conflict_counter","noconflict_counter","new_all","inner_arr","k","has_conflict","concatted_sched","concat","alert","handleClick","event","showSubjs","showClassList","showClassDesc","subj_to_find","target","innerText","relevant_classes","ClassListing","filter","subj","seen_nbrs","filtered_classes","setState","FilteredClassList","CompleteClassList","current_search","specific_class_list","currentTarget","id","lecs","discs","labs","sems","recs","subjs","temp_lec","temp_disc","temp_lab","temp_sems","temp_recs","class_num","openclose_temp","trim","class_data","showCourseDesc","LecArray","DiscArray","LabArray","SemArray","RecArray","SpecificClassList","LecDisplays","DiscDisplays","LabDisplays","SemDisplays","RecDisplays","FullSelectedClass","SelectedLecs","SelectedDiscs","SelectedLabs","SelectedSems","SelectedRecs","openClosedDisplays","show_desc","handleChange","value","action","name","handleBack","handleAdd","obj","intervalObj","temp_allSelectedIntervals","allSelectedIntervals","temp","new_sched_size","ScheduledClasses","allIntervals","numSchedules","curr_index","handleDel","new_selected_intervals","new_num_sched","fullname","new_array","new_array_all_intervals","filtered_scheds","handlePrev","new_curr_index","handleNext","inner_text","replace","inner_num","match","table","description","full_class_name","toUpperCase","handleSearch","handleExpand","handleCG","actual_cg_url","ClassLinks","window","open","handleATLAS","actual_art_url","showSource","label","key","LecToGenerate","timeIntervals","bind","displayed_scroller","add_rm_buttons","lecture_choices","disc_choices","lab_choices","sem_choices","rec_choices","class_header","back_btn","del_btn","class_btns","search_bar","nextprev","className","Button","variant","onClick","map","item","color","size","class","TextField","onChange","filtered_classnames","indiv","toLowerCase","dataLength","hasMore","style","fullWidth","filtered_list","ClassDescs","Grid","container","spacing","xs","justify","direction","alignItems","startIcon","already_in_scheduled","undefined","defaltValue","options","closeMenuOnSelect","components","placeholder","isMulti","defaultValue","textAlign","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee498de1.chunk.js","sourcesContent":["export const ClassNames = [\"AAS\", \"AERO\", \"AEROSP\", \"AES\", \"ALA\", \"AMCULT\", \"ANATOMY\", \"ANTHRARC\", \"ANTHRBIO\", \"ANTHRCUL\", \"APPPHYS\", \"ARABAM\", \n            \"ARABIC\", \"ARCH\", \"ARMENIAN\", \"ARTDES\", \"ARTSADMN\", \"ASIAN\", \"ASIANLAN\", \"ASIANPAM\", \"ASTRO\", \"AUTO\", \"BA\", \"BCS\", \n            \"BIOINF\", \"BIOLCHEM\", \"BIOLOGY\", \"BIOMEDE\", \"BIOPHYS\", \"BIOSTAT\", \"CATALAN\", \"CEE\", \"CHE\", \"CHEM\", \"CJS\", \"CLARCH\", \n            \"CLCIV\", \"CLIMATE\", \"CMPLXSYS\", \"COGSCI\", \"COMM\", \"COMP\", \"COMPLIT\", \"CSP\", \"CZECH\", \"DANCE\", \"DATASCI\", \"DIGITAL\", \n            \"DUTCH\", \"EARTH\", \"EAS\", \"ECON\", \"EDCURINS\", \"EDUC\", \"EEB\", \"EECS\", \"ELI\", \"ENGLISH\", \"ENGR\", \"ENS\", \"ENSCEN\", \"ENVIRON\", \n            \"ES\", \"ESENG\", \"FRENCH\", \"FTVM\", \"GEOG\", \"GERMAN\", \"GREEK\", \"GREEKMOD\", \"GTBOOKS\", \"HEBREW\", \"HISTART\", \"HISTORY\", \"HONORS\", \n            \"HS\", \"HUMGEN\", \"INSTHUM\", \"INTLSTD\", \"INTMED\", \"IOE\", \"ISLAM\", \"ITALIAN\", \"JAZZ\", \"JUDAIC\", \"KINESLGY\", \"KRSTD\", \"LACS\", \n            \"LATIN\", \"LATINOAM\", \"LING\", \"LSWA\", \"MACROMOL\", \"MATH\", \"MATSCIE\", \"MCDB\", \"MECHENG\", \"MEDCHEM\", \"MELANG\", \"MEMS\", \"MENAS\", \n            \"MFG\", \"MICROBIOL\", \"MIDEAST\", \"MILSCI\", \"MKT\", \"MOVESCI\", \"MUSEUMS\", \"MUSICOL\", \"MUSMETH\", \"MUSTHTRE\", \"NATIVEAM\", \"NAVARCH\",\n            \"NAVSCI\", \"NERS\", \"NURS\", \"ORGSTUDY\", \"PAT\", \"PATH\", \"PERSIAN\", \"PHARMACY\", \"PHARMSCI\", \"PHIL\", \"PHRMACOL\", \"PHYSICS\", \"PHYSIOL\", \n            \"PIBS\", \"POLISH\", \"POLSCI\", \"PORTUG\", \"PPE\", \"PSYCH\", \"PUBHLTH\", \"PUBPOL\", \"QMSS\", \"RCARTS\", \"RCASL\", \"RCCORE\", \"RCHUMS\", \"RCIDIV\", \n            \"RCLANG\", \"RCMUSIC\", \"RCNSCI\", \"RCSSCI\", \"REEES\", \"RELIGION\", \"ROMLANG\", \"ROMLING\", \"RUSSIAN\", \"SCAND\", \"SEAS\", \"SI\", \"SLAVIC\", \"SOC\", \n            \"SPACE\", \"SPANISH\", \"STATS\", \"STDABRD\", \"STRATEGY\", \"TCHNCLCM\", \"THEORY\", \"THTREMUS\", \"TO\", \"TURKISH\", \"UARTS\", \"UC\", \"UKR\", \"URP\", \n            \"WGS\", \"WRITING\", \"YIDDISH\"]\n\nexport default {\n    ClassNames, \n}\n","import React from 'react'\nimport WeekCalendar from 'react-week-calendar';\nimport moment from 'moment'\nimport 'react-week-calendar/dist/style.css';\nimport { mockComponent } from 'react-dom/test-utils';\n\nexport default class TestCal extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <WeekCalendar\n                startTime={moment({h:7, m:0})}\n                endTime={moment({h:21, m:30})}\n                scaleHeaderTitle={\"\"}\n                numberOfDays={5}\n                scaleUnit={30}\n                firstDay={moment().day(1)}\n                dayFormat={'dddd'}\n                useModal={false}\n                selectedIntervals={this.props.selectedIntervals}\n                onEventClick={this.props.handleEvClick}\n            />\n        )\n    }\n}","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {ClassNames} from './ClassNames';\nimport Button from '@material-ui/core/Button'\nimport Select from 'react-select'\nimport makeAnimated from 'react-select/animated'\nimport ClassListing from './FA2020';\nimport ClassDescs from './class_descs_FA2020'\nimport ClassLinks from './class_links_FA2020'\nimport TestCal from './TestCal'\nimport moment from 'moment'\nimport Moment from 'moment'\nimport {extendMoment} from 'moment-range';\nimport TextField from '@material-ui/core/TextField'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport Grid from '@material-ui/core/Grid'\nimport PublicIcon from '@material-ui/icons/Public';\nimport HttpsIcon from '@material-ui/icons/Https';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nconst buttonStyle = {\n    padding: 25,\n    right: 0,\n};\n\nconst scrollerboxes = {\n    borderRadius: 0,\n    height: 40,\n    margin: 1,\n    padding: 5,\n}\n\nconst spacingStyle = {\n    padding: 15,\n}\n\nconst descriptionStyle = {\n    fontSize: \"medium\",\n    textAlign: \"left\"\n}\n\nconst animatedComponents = makeAnimated();\nexport default class Scroller extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ClassNames,\n            value: {label: 'Default value', key: '01'},\n            showSubjs: true,\n            showClassList: false,\n            showClassDesc: false,\n\n            // eg (\"AEROSP, EECS, PSYCH\")\n            CurrentSubj: '',\n\n            // array containing one of each catalog number (eg 101, 110, etc) (json obj)\n            FilteredClassList: [],\n            // array containing every class in a given subject (json obj)\n            CompleteClassList: [],\n            // array containing every class of a given course catalog num (json obj)\n            SpecificClassList: [],\n\n            // array of json objects for each specifically selected class\n            LecArray: [],\n            DiscArray: [],\n            LabArray: [],\n            SemArray: [],\n            RecArray: [],\n\n            // displays of items in each dropdown menu\n            LecDisplays: null,\n            DiscDisplays: null,\n            LabDisplays: null,\n            SemDisplays: null,\n            RecDisplays: null,\n            openClosedDisplays: [],\n\n            // course number (eg 183, 280, 281)\n            SelectedClass: null,\n\n            // name of currently selected class\n            FullSelectedClass: null,\n            LecToGenerate: null,\n\n            // containers of selections of dropdown menus\n            SelectedLecs: [],\n            SelectedDiscs: [],\n            SelectedLabs: [],\n            SelectedSems: [],\n            SelectedRecs: [],\n\n            // container of all selected classes to go on schedule\n            ScheduledClasses: [],\n\n            // container of displayed classes on sched/all classes on sched\n            selectedIntervals: [],\n            allIntervals: [],\n            allSelectedIntervals: [],\n            timeIntervals: [],\n            curr_index: 0,\n            numSchedules: 1,\n\n            // searches\n            current_search: '',\n\n            // show description\n            show_desc: false,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleBack = this.handleBack.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handlePrev = this.handlePrev.bind(this);\n    }\n\n    fetchClassData = async(classname) => {\n        return await fetch(`/${classname}`)\n            .then(res => {\n              return res.json()\n            })\n            //.then(class_info => {return class_info})\n    }\n    componentDidMount = () => {\n        let classname = this.state.CurrentSubj+this.state.SelectedClass;\n        this.fetchClassData(classname)\n    }\n    \n    // handle returning the objects that are part of the dropdown menus\n    handleDisplay = (section, real_openclose) => {\n        let index = real_openclose.findIndex(sec => {\n            return sec.class_no === section['Class Nbr']\n        })\n        let open_display = \"? \"\n        if (index !== -1 && real_openclose[index].open_seats === 0) {\n            open_display = \"🔴 \"\n        } \n        if (index !== -1 && real_openclose[index].open_seats > 0) {\n            open_display = \"🟢 \"\n        }\n\n        let disp_obj = {};\n        disp_obj[\"value\"] = section['Class Nbr']\n        disp_obj[\"label\"] = open_display + \"Section \" + section['Section'] + \" | \"\n        + section['M']+section['T']+section['W']+section['TH']+section['F']\n        + \" | \" + section['Time'] + \" | \" + section['Class Nbr']\n        disp_obj[\"time\"] = section['Time']\n        let thurs = ''\n        if (section['TH'] === 'TH') {\n            thurs = 'R'\n        }\n        disp_obj[\"days\"] = section['M']+section['T']+section['W']+thurs+section['F']\n        disp_obj[\"section\"] = section['Section']\n        return disp_obj;\n    }\n\n    // formats time slots for events on calendar\n    formatTime = unformattedTime => {\n        if (unformattedTime === \"ARR\") {\n            return null\n        }\n\n        let start = unformattedTime.substr(0, unformattedTime.indexOf('-'))\n        let end = unformattedTime.split(/[- ABCDEFGHIJKLMNOPQRSTUVWXYZ]/)[1]\n        console.log(end)\n        let ampm = unformattedTime.split(/[- 0123456789]/).slice(-1)[0]\n        console.log(ampm)\n        let start_hour\n        let start_min\n        let end_hour\n        let end_min\n        if (start.includes(\"30\")) {\n            let hour = start.substr(0, start.indexOf(\"30\"));\n            start_hour = parseInt(hour);\n            start_min = 30\n        } else {\n            start_hour = parseInt(start);\n            start_min = 0;\n        }\n        if (end.includes(\"30\")) {\n            let hour = end.substr(0, end.indexOf(\"30\"));\n            end_hour = parseInt(hour);\n            end_min = 30\n        } else {\n            end_hour = parseInt(end);\n            end_min = 0;\n        }\n\n        if (start_hour >= 8 && start_hour <= 12 && end_hour > 0 && end_hour <= 9 && ampm === \"PM\") {\n            end_hour += 12;\n        } if (start_hour > 0 && start_hour <= 8 && ampm === \"PM\") {\n            start_hour += 12;\n            end_hour += 12;\n        }\n\n        let start_obj = {}\n        let end_obj = {}\n        start_obj[\"hour\"] = start_hour;\n        start_obj[\"min\"] = start_min;\n        end_obj[\"hour\"] = end_hour;\n        end_obj[\"min\"] = end_min;\n        return ({ \n            start_obj, end_obj\n        })\n    }\n\n    formatDays = unformattedDays => {\n        let days = [];\n        if (unformattedDays.includes('M')) {\n            days.push(1)\n        }\n        if (unformattedDays.includes('T')) {\n            days.push(2)\n        }\n        if (unformattedDays.includes('W')) {\n            days.push(3)\n        }\n        if (unformattedDays.includes('R')) {\n            days.push(4)\n        }\n        if (unformattedDays.includes('F')) {\n            days.push(5)\n        }\n        return days\n    }\n\n    // used in handleAdd - setting up format for actual events to be displayed on calendar\n\n    // push all sections into a temp array\n    // include the formatted timeslot of each obj with its corresponding section\n    // set the corresponding key of obj to the collected sections\n    handleScheduling = selected_list => {\n        let innerobj = {}\n        let class_arr = []\n        for(let i = 0; i < selected_list.length; ++i) {\n            innerobj[\"description\"] = selected_list[i];\n            innerobj[\"timeslot\"] = this.formatTime(selected_list[i]['time'])\n            innerobj[\"days\"] = this.formatDays(selected_list[i]['days'])\n            innerobj[\"section\"] = selected_list[i]['section']\n            class_arr.push(innerobj);\n            innerobj = {};\n            console.log(this.formatTime(selected_list[i]['time']))\n        }\n        // set the corresponding key of obj to the collected sections\n        return class_arr\n    }\n\n    // adds all intervals of a class's lectures/discussions/labs/sems/recs to interval_arr\n    // used in handleAdd\n    addAllIntervals = (unformattedIntervals, class_name, class_type) => {\n        let innerobj = {}\n        let interval_arr_out = []\n        let interval_arr_in = []\n        for (let i = 0; i < unformattedIntervals.length; ++i) {\n            let no_days = false;\n            let no_time = false;\n            if (unformattedIntervals[i]['days'].length === 0) {\n                no_time = true;\n            }\n            if (unformattedIntervals[i]['time'] === 'ARR') {\n                no_days = true;\n            }\n            for (let j = 0; j < unformattedIntervals[i]['days'].length; ++j) {\n                innerobj['uid'] = class_name\n                innerobj['start'] = moment({h: unformattedIntervals[i]['timeslot']['start_obj']['hour'], \n                                            m: unformattedIntervals[i]['timeslot']['start_obj']['min']})\n                                            .day(unformattedIntervals[i]['days'][j])\n                innerobj['end'] = moment({h: unformattedIntervals[i]['timeslot']['end_obj']['hour'], \n                                            m: unformattedIntervals[i]['timeslot']['end_obj']['min']})\n                                            .day(unformattedIntervals[i]['days'][j])\n                innerobj['value'] = class_name + \" \" + class_type + \" \" + unformattedIntervals[i]['section']\n                + \" ID: \" + unformattedIntervals[i]['description']['value']\n                interval_arr_in.push(innerobj)\n                innerobj = {}\n            }\n            // if there are no days scheduled\n            if (!no_time && !no_days) {\n                interval_arr_out.push(interval_arr_in)\n            }\n            interval_arr_in = [];\n        }\n        return interval_arr_out\n    }\n\n    // checks for conflicts between two time slots\n    check_conflicts = (start_time1, end_time1, start_time2, end_time2) => {\n        const mom = extendMoment(Moment);\n        let date1 = [start_time1, end_time1];\n        let date2 = [start_time2, end_time2];\n        let range1 = mom.range(date1);\n        let range2 = mom.range(date2);\n        if (range1.overlaps(range2)) {\n            return true;\n        }\n        return false;\n    }\n\n    // add to array of all selectedIntervals \n    update_selectedIntervals = (all_schedules, interval_obj) => {\n        let conflict_counter = 0;\n        let noconflict_counter = 0;\n        // set up selected intervals\n        let new_all = []\n        if (interval_obj.length === 0) {\n            return [all_schedules, true]\n        }\n\n        if (all_schedules.length === 0) {\n            console.log('true')\n            for (let i = 0; i < interval_obj.length; ++i) {\n                let inner_arr = [];\n                for (let j = 0; j < interval_obj[i].length; ++j) {\n                    inner_arr.push(interval_obj[i][j])\n                }\n                new_all.push(inner_arr)\n            }\n            return [new_all, true]\n        } \n        // add to existing selected intervals\n        else {\n            // over container of all intervals \n            for (let k = 0; k < interval_obj.length; ++k) {\n                //(allSelectedIntervals)\n                for (let i = 0; i < all_schedules.length; ++i) {\n                    // over each specific selectedInterval\n                    let has_conflict = false;\n                    for (let j = 0; j < all_schedules[i].length; ++j) {\n                        // over each time interval within the interval_obj\n                        for (let h = 0; h < interval_obj[k].length; ++h) {\n                            if (this.check_conflicts(all_schedules[i][j]['start'], all_schedules[i][j]['end'], \n                                                    interval_obj[k][h]['start'], interval_obj[k][h]['end'])) {\n                                has_conflict = true;\n                            } \n                            // check if time or days dont exist here\n                        }\n                    } \n                    if (!has_conflict) {\n                        let concatted_sched = all_schedules[i].concat(interval_obj[k])\n                        new_all.push(concatted_sched)\n                        ++noconflict_counter\n                    } \n                    else {\n                        ++conflict_counter\n                    }\n                }\n            }\n        }\n        // TODO: find better way to see if all classes conflict\n        if (conflict_counter >= all_schedules.length && noconflict_counter < conflict_counter) {\n            alert(\"Couldn't add class to schedule: conflicted with every possible schedule\")\n            return [all_schedules, false];\n        } \n        else {\n            return [new_all, true];\n        }\n    }\n\n    // handle clicks on the scroller\n    // async because we want to wait for class data api to return w data before proceeding when showing class data\n    handleClick = async(event) => {\n        //let event_copy = event;\n        // if the user clicks on a subject...\n        if (this.state.showSubjs && !this.state.showClassList && !this.state.showClassDesc) {\n            // filters relevant classes \n            let subj_to_find = '(' + event.target.innerText + ')';\n            let relevant_classes = ClassListing.filter(subj => subj['Subject'].includes(subj_to_find));\n            \n            // filters duplicate catalog numbers \n            let seen_nbrs = {}\n            const filtered_classes = relevant_classes.filter(subj => {\n                if (subj['Catalog Nbr'] in seen_nbrs) {\n                    return false;\n                } else {\n                    seen_nbrs[subj['Catalog Nbr']] = true;\n                    return true;\n                }\n            })\n\n            // sets state after updating information\n            this.setState({\n                showSubjs: false,\n                showClassList: true,\n                CurrentSubj: event.target.innerText,\n                FilteredClassList: filtered_classes,\n                CompleteClassList: relevant_classes,\n                current_search: '',\n            })\n        } \n        //let class_num = event.currentTarget.id;\n        // if the user clicks on a class...\n        if (this.state.showClassList) {\n            let specific_class_list = this.state.CompleteClassList.filter(subj => subj['Catalog Nbr'] === event.currentTarget.id)\n            const lecs = specific_class_list.filter(subj => subj['Component'] === 'LEC')\n            const discs = specific_class_list.filter(subj => subj['Component'] === 'DIS')\n            const labs = specific_class_list.filter(subj => subj['Component'] === 'LAB')\n            const sems = specific_class_list.filter(subj => subj['Component'] === 'SEM')\n            const recs = specific_class_list.filter(subjs => subjs['Component'] === 'REC')\n\n            let temp_lec = [];\n            let temp_disc = [];\n            let temp_lab = [];\n            let temp_sems = [];\n            let temp_recs = [];\n\n            // event can't be used in asynchronous calls so we need to make references first\n            let class_num = event.currentTarget.id;\n            let class_name = event.currentTarget.innerText\n            \n            let openclose_temp = [];\n\n            // wait until this is done, then proceed with the rest of the logic (await)\n            // this fetches all of the open/close data from the course guide\n            await this.fetchClassData(this.state.CurrentSubj+class_num.trim())\n                .then(class_data => {\n                    openclose_temp.push(class_data);\n                }); \n\n            //console.table(openclose_temp[0])\n            let real_openclose = openclose_temp[0]\n        \n            // gathering info to send to dropdown menus to display\n            for (let i = 0; i < lecs.length; ++i) {\n                let disp_obj = this.handleDisplay(lecs[i], real_openclose)\n                temp_lec.push(disp_obj);\n            }\n            for (let i = 0; i < discs.length; ++i) {\n                let disp_obj = this.handleDisplay(discs[i], real_openclose)\n                temp_disc.push(disp_obj);\n            }\n            for (let i = 0; i < labs.length; ++i) {\n                let disp_obj = this.handleDisplay(labs[i], real_openclose)\n                temp_lab.push(disp_obj);\n            }\n            for (let i = 0; i < sems.length; ++i) {\n                let disp_obj = this.handleDisplay(sems[i], real_openclose)\n                temp_sems.push(disp_obj);\n            }\n            for (let i = 0; i < recs.length; ++i) {\n                let disp_obj = this.handleDisplay(recs[i], real_openclose)\n                temp_recs.push(disp_obj);\n            }\n\n            // update state\n            this.setState({\n                showClassList: true,\n                showCourseDesc: true,\n                LecArray: lecs,\n                DiscArray: discs,\n                LabArray: labs,\n                SemArray: sems,\n                RecArray: recs,\n                SelectedClass: class_num,\n                SpecificClassList: specific_class_list,\n                LecDisplays: temp_lec,\n                DiscDisplays: temp_disc,\n                LabDisplays: temp_lab,\n                SemDisplays: temp_sems,\n                RecDisplays: temp_recs,\n                FullSelectedClass: class_name,\n                SelectedLecs: [],\n                SelectedDiscs: [],\n                SelectedLabs: [],\n                SelectedSems: [],\n                SelectedRecs: [],\n                openClosedDisplays: openclose_temp[0],\n                show_desc: false,\n            })\n        } \n    }\n\n    // updates the appropriate state arrays \n    // when class times are selected\n    handleChange = (value, action) => {\n        console.log(action.name)\n        if (action.name === 'lecs') {\n            this.setState({SelectedLecs:value})\n        } if (action.name === 'disc') {\n            this.setState({SelectedDiscs:value})\n        } if (action.name === 'lab') {\n            console.log(action.name)\n            console.log(value)\n            this.setState({SelectedLabs:value})\n        } if (action.name === 'sem') {\n            this.setState({SelectedSems:value})\n        } if (action.name === 'rec') {\n            this.setState({SelectedRecs:value})\n        }\n    }\n\n    handleBack = () => {\n        this.setState({\n            showSubjs: true,\n            showClassDesc: false,\n            showClassList: false,\n            showCourseDesc: false,\n            FullSelectedClass: null,\n            SelectedLecs: [],\n            SelectedDiscs: [],\n            SelectedLabs: [],\n            SelectedSems: [],\n            SelectedRecs: [],\n            LecDisplays: null,\n            DiscDisplays: null,\n            LabDisplays: null,\n            SemDisplays: null,\n            RecDisplays: null,\n            FullSelectedClass: null,\n            SpecificClassList: null,\n            CurrentSubj: null,\n            FilteredClassList: null,\n            CompleteClassList: null,\n            SpecificClassList: null,\n            SelectedClass: null,\n            LecArray: [],\n            DiscArray: [],\n            LabArray: [],\n            SemArray: [],\n            RecArray: [],\n            current_search: '',\n            show_desc: false,\n        })\n    }\n\n    // adds selected values to an array called ScheduledClasses\n    handleAdd = () => {\n        // add all of the selected options to the calendar display array\n        let obj = {};\n        let intervalObj = {};\n        let potentialSelected = [];\n\n        // seriously keeps track of all selected\n        let temp_allSelectedIntervals = this.state.allSelectedIntervals\n\n        obj[\"class\"] = this.state.CurrentSubj+this.state.SelectedClass;\n        intervalObj[\"class\"] = this.state.CurrentSubj+this.state.SelectedClass;\n        // push all of the selected class info into the scheduled classes container in state\n        if (this.state.SelectedLecs !== null && this.state.SelectedLecs.length !== 0) {\n            obj[\"lecs\"]=this.handleScheduling(this.state.SelectedLecs);\n            // set up selectedInterval (currently displayed classes)\n            // add everything selected lec into all intervals, choose first of those to actually display\n            intervalObj[\"LEC\"] = this.addAllIntervals(obj[\"lecs\"], obj[\"class\"], \"LEC\") \n            let temp = this.update_selectedIntervals(temp_allSelectedIntervals, intervalObj[\"LEC\"])\n            temp_allSelectedIntervals = temp[0]\n\n            // if these lectures didn't fit, don't include them in allintervals or scheduledclasses\n            // this helps when a class is deleted so no surprise conflicts are made when rescheduling\n            if (!temp[1]) {\n                delete obj[\"lecs\"]\n                delete intervalObj[\"LEC\"]\n            }\n        }\n        if (this.state.SelectedDiscs !== null && this.state.SelectedDiscs.length !== 0) {\n            obj[\"discs\"]=this.handleScheduling(this.state.SelectedDiscs);\n            intervalObj[\"DIS\"] = this.addAllIntervals(obj[\"discs\"], obj[\"class\"], \"DIS\")\n            let temp = this.update_selectedIntervals(temp_allSelectedIntervals, intervalObj[\"DIS\"])\n            temp_allSelectedIntervals = temp[0]\n            if (!temp[1]) {\n                delete obj[\"discs\"]\n                delete intervalObj[\"DIS\"]\n            }\n        }\n        if (this.state.SelectedLabs !== null && this.state.SelectedLabs.length !== 0) {\n            obj[\"labs\"]=this.handleScheduling(this.state.SelectedLabs);\n            intervalObj[\"LAB\"] = this.addAllIntervals(obj[\"labs\"], obj[\"class\"], \"LAB\")\n            let temp = this.update_selectedIntervals(temp_allSelectedIntervals, intervalObj[\"LAB\"])\n            temp_allSelectedIntervals = temp[0]\n            if (!temp[1]) {\n                delete obj[\"labs\"]\n                delete intervalObj[\"LAB\"]\n            }\n        }\n        if (this.state.SelectedSems !== null && this.state.SelectedSems.length !== 0) {\n            obj[\"sems\"]=this.handleScheduling(this.state.SelectedSems);\n            intervalObj[\"SEM\"] = this.addAllIntervals(obj[\"sems\"], obj[\"class\"], \"SEM\")\n            let temp = this.update_selectedIntervals(temp_allSelectedIntervals, intervalObj[\"SEM\"])\n            temp_allSelectedIntervals = temp[0]\n            if (!temp[1]) {\n                delete obj[\"sems\"]\n                delete intervalObj[\"SEM\"]\n            }\n        }\n        if (this.state.SelectedRecs !== null && this.state.SelectedRecs.length !== 0) {\n            obj[\"recs\"]=this.handleScheduling(this.state.SelectedRecs);\n            intervalObj[\"REC\"] = this.addAllIntervals(obj[\"recs\"], obj[\"class\"], \"REC\")\n            let temp = this.update_selectedIntervals(temp_allSelectedIntervals, intervalObj[\"REC\"])\n            temp_allSelectedIntervals = temp[0]\n            if (!temp[1]) {\n                delete obj[\"recs\"]\n                delete intervalObj[\"REC\"]\n            }\n        }\n\n        // if everything is empty, avoid changing the state because nothing needs to be modified\n        if (!('lecs' in obj) && !('discs' in obj) && !('labs' in obj) && !('sems' in obj) && !('recs' in obj)) {\n            //obj = {}\n            return\n        }\n        // if everything is empty, avoid changing the state because nothing needs to be modified\n        if (!('LEC' in intervalObj) && !('DIS' in intervalObj) && !('LAB' in intervalObj) \n        && !('REC' in intervalObj) && !('SEM' in intervalObj)) {\n            //intervalObj = {}\n            return\n        }\n\n        let new_sched_size = temp_allSelectedIntervals.length;\n        if (new_sched_size === 0) {\n            new_sched_size = 1\n        }\n        // update state\n        this.setState({\n            SelectedLecs: [],\n            SelectedDiscs: [],\n            SelectedLabs: [],\n            SelectedSems: [],\n            SelectedRecs: [],\n            ScheduledClasses: this.state.ScheduledClasses.concat(obj),\n            allIntervals: this.state.allIntervals.concat(intervalObj),\n            selectedIntervals: temp_allSelectedIntervals[0],\n            allSelectedIntervals: temp_allSelectedIntervals,\n            numSchedules: new_sched_size,\n            curr_index: 0,\n        })\n    }\n\n    // deleting a class from the calendar\n    handleDel = () => {\n        let fullname = this.state.FullSelectedClass;\n        let new_array = this.state.ScheduledClasses.filter(subj => fullname.includes(subj['class']) === false)\n        let new_array_all_intervals = this.state.allIntervals.filter(subj => fullname.includes(subj['class']) === false)\n        let new_selected_intervals, new_num_sched\n\n        let filtered_scheds = []\n        // remake all possible schedules\n        for (let i = 0; i < new_array_all_intervals.length; ++i) {\n            if ('lecs' in new_array[i]) {\n                let temp = this.update_selectedIntervals(filtered_scheds, new_array_all_intervals[i]['LEC'])\n                filtered_scheds = temp[0]\n            }\n            if (('discs') in new_array[i]) {\n                let temp = this.update_selectedIntervals(filtered_scheds, new_array_all_intervals[i]['DIS'])\n                filtered_scheds = temp[0]\n            }\n            if (('labs') in new_array[i]) {\n                let temp = this.update_selectedIntervals(filtered_scheds, new_array_all_intervals[i]['LAB'])\n                filtered_scheds = temp[0]\n            }\n            if (('sems') in new_array[i]) {\n                let temp = this.update_selectedIntervals(filtered_scheds, new_array_all_intervals[i]['SEM'])\n                filtered_scheds = temp[0]\n            }\n            if (('recs') in new_array[i]) {\n                let temp = this.update_selectedIntervals(filtered_scheds, new_array_all_intervals[i]['REC'])\n                filtered_scheds = temp[0]\n            } \n        }\n\n        if (filtered_scheds.length !== 0) {\n            new_selected_intervals = filtered_scheds[0]\n            new_num_sched = filtered_scheds.length\n        } else {\n            new_selected_intervals = []\n            new_num_sched = 1\n        }\n\n        this.setState({\n            ScheduledClasses: new_array,\n            allIntervals: new_array_all_intervals,\n            selectedIntervals: new_selected_intervals,\n            allSelectedIntervals: filtered_scheds,\n            curr_index: 0,\n            numSchedules: new_num_sched\n        })\n    }\n\n    // previous permutation\n    handlePrev = () => {\n        let new_curr_index \n        if (this.state.curr_index === 0) {\n            new_curr_index = this.state.numSchedules - 1\n        } else {\n            new_curr_index = this.state.curr_index - 1\n        }\n        this.setState({\n            curr_index: new_curr_index,\n            selectedIntervals: this.state.allSelectedIntervals[new_curr_index],\n        })\n    }\n\n    // next permutation\n    handleNext = () => {\n        let new_curr_index\n        if (this.state.curr_index + 1 === this.state.numSchedules) {\n            new_curr_index = 0\n        } else {\n            new_curr_index = this.state.curr_index + 1\n        }\n        this.setState({\n            curr_index: new_curr_index,\n            selectedIntervals: this.state.allSelectedIntervals[new_curr_index],\n        })\n    }\n\n    handleEvClick = async(event) => {\n        // get complete_class_list\n        let inner_text = event.target.innerText.replace(/[0-9]/g, '').trim()\n        let subj_to_find = '(' + inner_text + ')';\n        let relevant_classes = ClassListing.filter(subj => subj['Subject'].includes(subj_to_find));\n        // filters duplicate catalog numbers \n        let seen_nbrs = {}\n        const filtered_classes = relevant_classes.filter(subj => {\n            if (subj['Catalog Nbr'] in seen_nbrs) {\n                return false;\n            } else {\n                seen_nbrs[subj['Catalog Nbr']] = true;\n                return true;\n            }\n        })\n\n        let inner_num = event.target.innerText.match(/\\d+/)[0].trim()\n        let specific_class_list = relevant_classes.filter(subj => subj['Catalog Nbr'] === \" \"+inner_num)\n        console.table(specific_class_list)\n        let description = specific_class_list[0]['Course Title']\n        const lecs = specific_class_list.filter(subj => subj['Component'] === 'LEC')\n        const discs = specific_class_list.filter(subj => subj['Component'] === 'DIS')\n        const labs = specific_class_list.filter(subj => subj['Component'] === 'LAB')\n        const sems = specific_class_list.filter(subj => subj['Component'] === 'SEM')\n        const recs = specific_class_list.filter(subjs => subjs['Component'] === 'REC')\n\n        let temp_lec = [];\n        let temp_disc = [];\n        let temp_lab = [];\n        let temp_sems = [];\n        let temp_recs = [];\n        \n        let openclose_temp = [];\n\n        // wait until this is done, then proceed with the rest of the logic (await)\n        // this fetches all of the open/close data from the course guide\n        await this.fetchClassData(inner_text+inner_num)\n            .then(class_data => {\n                openclose_temp.push(class_data);\n            }); \n\n        //console.table(openclose_temp[0])\n        let real_openclose = openclose_temp[0]\n    \n        // gathering info to send to dropdown menus to display\n        for (let i = 0; i < lecs.length; ++i) {\n            let disp_obj = this.handleDisplay(lecs[i], real_openclose)\n            temp_lec.push(disp_obj);\n        }\n        for (let i = 0; i < discs.length; ++i) {\n            let disp_obj = this.handleDisplay(discs[i], real_openclose)\n            temp_disc.push(disp_obj);\n        }\n        for (let i = 0; i < labs.length; ++i) {\n            let disp_obj = this.handleDisplay(labs[i], real_openclose)\n            temp_lab.push(disp_obj);\n        }\n        for (let i = 0; i < sems.length; ++i) {\n            let disp_obj = this.handleDisplay(sems[i], real_openclose)\n            temp_sems.push(disp_obj);\n        }\n        for (let i = 0; i < recs.length; ++i) {\n            let disp_obj = this.handleDisplay(recs[i], real_openclose)\n            temp_recs.push(disp_obj);\n        }\n        let full_class_name = inner_text + \" \" + inner_num + \": \" + description\n        full_class_name = full_class_name.toUpperCase()\n        this.setState({\n            showSubjs: false,\n            showClassList: true,\n            showCourseDesc: true,\n            CurrentSubj: inner_text,\n            FilteredClassList: filtered_classes,\n            CompleteClassList: relevant_classes,\n            LecArray: lecs,\n            DiscArray: discs,\n            LabArray: labs,\n            SemArray: sems,\n            RecArray: recs,\n            SelectedClass: \" \"+inner_num,\n            SpecificClassList: specific_class_list,\n            LecDisplays: temp_lec,\n            DiscDisplays: temp_disc,\n            LabDisplays: temp_lab,\n            SemDisplays: temp_sems,\n            RecDisplays: temp_recs,\n            FullSelectedClass: full_class_name,\n            SelectedLecs: [],\n            SelectedDiscs: [],\n            SelectedLabs: [],\n            SelectedSems: [],\n            SelectedRecs: [],\n            openClosedDisplays: openclose_temp[0],\n        })\n\n    }\n\n    handleSearch = event => {\n        this.setState({\n            current_search: event.target.value,\n        })\n    }\n\n    handleExpand = () => {\n        this.setState({\n            show_desc: !this.state.show_desc\n        })\n    }\n\n    handleCG = () => {\n        let cg_url_obj = ClassLinks[this.state.CurrentSubj].filter(subj => subj['num'] === parseInt(this.state.SelectedClass))\n        let actual_cg_url = cg_url_obj[0]['cg']\n        window.open(actual_cg_url)\n    }\n\n    handleATLAS = () => {\n        let art_url_obj = ClassLinks[this.state.CurrentSubj].filter(subj => subj['num'] === parseInt(this.state.SelectedClass))\n        let actual_art_url = art_url_obj[0]['art']\n        window.open(actual_art_url)\n    }\n\n    showSource = () => {\n        window.open('https://github.com/akdiam/um-schedulerv2')\n    }\n\n    render() {\n        let displayed_scroller;\n        let add_rm_buttons;\n        let lecture_choices;\n        let disc_choices;\n        let lab_choices;\n        let sem_choices;\n        let rec_choices;\n        let class_header;\n        let back_btn;\n        let del_btn;    \n        let nextprev = \n        <div className = \"btn\"> \n            <Button variant=\"contained\" className=\"backbtn\" onClick={this.handlePrev}>Back</Button>\n            <div className = \"pages\">{this.state.curr_index+1}/{this.state.numSchedules}</div>\n            <Button variant=\"contained\" className=\"forbtn\" onClick={this.handleNext}>Next</Button>\n        </div>\n        let class_btns;\n        let search_bar;\n        \n        if (this.state.ScheduledClasses.length !== 0) {\n            class_btns = \n            <div>\n                {this.state.ScheduledClasses.map((item, index) => (\n                    <Button color = \"primary\" variant=\"outlined\" size=\"medium\" onClick={this.handleEvClick}>\n                        {item.class}\n                    </Button>\n                ))}\n                <hr/>\n            </div>\n        }\n        \n\n        {/* controls the display for subject listing */}\n        if (this.state.showSubjs && !this.state.showClassList && !this.state.showClassDesc) {\n            search_bar = \n            <form>\n                <TextField size=\"small\" variant=\"outlined\" id=\"search_subj\" label=\"Search for a Subject\" onChange={this.handleSearch}/> \n            </form>\n\n            let filtered_classnames = this.state.ClassNames.filter(indiv => {\n                return indiv.toLowerCase().includes(this.state.current_search.toLowerCase())\n            })\n\n            displayed_scroller = <InfiniteScroll\n            dataLength={filtered_classnames.length}\n            hasMore={false}\n            height={270}\n            >\n            {filtered_classnames.map((name, index) => (\n                <div style = {scrollerboxes} key = {index} value = {name}>\n                    <Button fullWidth variant=\"outlined\" size=\"large\" onClick = {this.handleClick}>{name}</Button> \n                </div>\n            ))}\n            </InfiniteScroll>\n        } \n        \n        {/* controls the display for specific class listings */}\n        if (this.state.showClassList && !this.state.showSubjs && !this.state.showCourseDesc) {\n            search_bar = \n            <form>\n                <TextField size=\"small\" variant=\"outlined\" id=\"search_class\" label=\"Search for a Class\" onChange={this.handleSearch}/> \n            </form>\n\n            back_btn = \n            <Button variant=\"contained\" size=\"small\" onClick={this.handleBack} color=\"secondary\" id=\"back\">\n                Back to Subjects\n            </Button>\n\n            let filtered_list = this.state.FilteredClassList.filter(indiv => {\n                let full_name = this.state.CurrentSubj+indiv['Catalog Nbr']+\" \"+indiv['Course Title']\n                return full_name.toLowerCase().includes(this.state.current_search)\n            })\n\n            displayed_scroller = <InfiniteScroll\n            dataLength={filtered_list.length}\n            hasMore={false}\n            height={270}\n            >\n            {filtered_list.map((item, index) => (\n                <div style = {scrollerboxes} key = {index} value = {item}>\n                    <Button fullWidth variant=\"outlined\" size=\"large\" id={item['Catalog Nbr']} onClick = {this.handleClick}>\n                        {this.state.CurrentSubj} {item['Catalog Nbr']}: {item['Course Title']}\n                    </Button> \n                </div>\n            ))}\n            </InfiniteScroll>\n        }\n        \n        {/* controls the display for class descriptions and add/remove btn */}\n        if (this.state.showClassList && this.state.showCourseDesc) {\n            search_bar = \n            <form>\n                <TextField size=\"small\" variant=\"outlined\" id=\"search_class\" label=\"Search for a Class\" onChange={this.handleSearch}/> \n            </form>\n\n            back_btn = \n            <Button variant=\"contained\" size=\"small\" onClick={this.handleBack} color=\"secondary\" id=\"back\">\n                Back to Subjects\n            </Button>\n            \n            let description = ClassDescs[this.state.CurrentSubj].filter(subj => subj['num'] === parseInt(this.state.SelectedClass))\n            console.log(description)\n            \n            if (this.state.show_desc) {\n                class_header = \n                <Grid container spacing = {3}>\n                    <Grid item xs justify = \"flex-start\" direction = \"column\">\n                        <strong id=\"fullname\">{this.state.FullSelectedClass}</strong>\n                        <p id=\"descriptions\">{this.state.SpecificClassList[0]['Units']} credits. {description[0]['desc']}</p>\n                    </Grid>\n                    <Grid item xs = {3} direction=\"column\" justify=\"space-between\" alignItems=\"center\">\n                        <Button variant=\"outlined\" size=\"small\" color=\"secondary\" startIcon={<ExpandLessIcon/>} onClick={this.handleExpand}>Less</Button>\n                        <Grid>\n                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" startIcon={<PublicIcon/>} onClick={this.handleCG}>Course Guide</Button>\n                            <Button variant=\"outlined\" size=\"small\" color=\"primary\" startIcon={<HttpsIcon/>} onClick={this.handleATLAS}>ATLAS</Button>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            } else {\n                class_header = \n                <Grid container spacing = {3}>\n                    <Grid item xs justify = \"flex-start\" direction = \"column\">\n                        <strong id=\"fullname\">{this.state.FullSelectedClass}</strong>\n                    </Grid>\n                    <Grid item xs = {3}>\n                        <Button variant=\"outlined\" size=\"small\" color=\"secondary\" startIcon={<ExpandMoreIcon/>} onClick={this.handleExpand}>More</Button>\n                    </Grid>\n                </Grid>\n            }\n            \n\n            let filtered_list = this.state.FilteredClassList.filter(indiv => {\n                let full_name = this.state.CurrentSubj+indiv['Catalog Nbr']+\" \"+indiv['Course Title']\n                return full_name.toLowerCase().includes(this.state.current_search)\n            })\n\n            displayed_scroller = \n            <InfiniteScroll\n            dataLength={filtered_list.length}\n            hasMore={false}\n            height={270}\n            >\n            {filtered_list.map((item, index) => (\n                <div style = {scrollerboxes} key = {index} value = {item}>\n                    <Button fullWidth variant=\"outlined\" size=\"large\" id={item['Catalog Nbr']} onClick = {this.handleClick}>\n                        {this.state.CurrentSubj} {item['Catalog Nbr']}: {item['Course Title']}\n                    </Button> \n                </div>\n            ))}\n            </InfiniteScroll>\n\n            {/*checking to see if selected class is already in scheduled class to decide what to render*/}\n            let already_in_scheduled = false;\n            for (let i = 0; i < this.state.ScheduledClasses.length; ++i) {\n                if (this.state.FullSelectedClass.includes(this.state.ScheduledClasses[i]['class'])){\n                    already_in_scheduled = true;\n                }\n            }\n\n            {/* if class is already in schedule, don't let user choose the class again/hide selector */}\n            if (already_in_scheduled) {\n                del_btn = \n                <div style={buttonStyle}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleDel}>\n                        Delete Class From to Schedule\n                    </Button>\n                </div>\n            } \n            //otherwise, display the selector and let user add class to their schedule\n            else {\n                {/*if lecarray isn't empty, create an object to be displayed showing the options*/}\n                if (this.state.LecArray !== undefined && this.state.LecArray.length !== 0) {\n                    lecture_choices = \n                    <div>\n                        <i style={spacingStyle}>Lectures (choose at least one):</i>\n                        <Select\n                            value={this.state.SelectedLecs}\n                            defaltValue={this.state.SelectedLecs}\n                            options={this.state.LecDisplays}\n                            closeMenuOnSelect={false}\n                            components={animatedComponents}\n                            onChange={this.handleChange}\n                            placeholder=\"Select a lecture(s)\"\n                            name=\"lecs\"\n                            isMulti\n                        />\n                    </div>\n                } if (this.state.DiscArray !== undefined && this.state.DiscArray.length !== 0) {\n                    disc_choices = \n                    <div>\n                        <i style={spacingStyle}>Discussions (choose at least one):</i>\n                        <Select\n                            value={this.state.SelectedDiscs}\n                            defaultValue={this.state.SelectedDiscs}\n                            options={this.state.DiscDisplays}\n                            closeMenuOnSelect={false}\n                            components={animatedComponents}\n                            onChange={this.handleChange}\n                            placeholder=\"Select a discussion(s)\"\n                            name=\"disc\"\n                            isMulti\n                        />\n                    </div>\n                } if (this.state.LabArray !== undefined && this.state.LabArray.length !== 0) {\n                    lab_choices = \n                    <div>\n                        <i style={spacingStyle}>Labs (choose at least one):</i>\n                        <Select\n                            value={this.state.SelectedLabs}\n                            defaultValue={this.state.SelectedLabs}\n                            options={this.state.LabDisplays}\n                            closeMenuOnSelect={false}\n                            components={animatedComponents}\n                            onChange={this.handleChange}\n                            placeholder=\"Select a lab(s)\"\n                            name=\"lab\"\n                            isMulti\n                        />\n                    </div>\n                } if (this.state.SemArray !== undefined && this.state.SemArray.length !== 0) {\n                    sem_choices = \n                    <div>\n                        <i style={spacingStyle}>Seminars (choose at least one):</i>\n                        <Select\n                            value={this.state.SelectedSems}\n                            defaultValue={this.state.SelectedSems}\n                            options={this.state.SemDisplays}\n                            closeMenuOnSelect={false}\n                            components={animatedComponents}\n                            onChange={this.handleChange}\n                            placeholder=\"Select a seminar(s)\"\n                            name=\"sem\"\n                            isMulti\n                        />\n                    </div>\n                }\n                if (this.state.RecArray !== undefined && this.state.RecArray.length !== 0) {\n                    rec_choices = \n                    <div>\n                        <i style={spacingStyle}>Recitations (choose at least one):</i>\n                        <Select\n                            value={this.state.SelectedRecs}\n                            defaultValue={this.state.SelectedRecs}\n                            options={this.state.RecDisplays}\n                            closeMenuOnSelect={false}\n                            components={animatedComponents}\n                            onChange={this.handleChange}\n                            placeholder=\"Select a recitation(s)\"\n                            name=\"rec\"\n                            isMulti\n                        />\n                    </div>\n                }\n                add_rm_buttons = \n                    <div style={buttonStyle}>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleAdd}>\n                            Add Sections to Schedule\n                        </Button>\n                    </div>\n                }\n        }\n\n        return (\n            <div>\n                <div className = \"left-div\">\n                    {/* SEARCH FOR CLASS */}\n                    <div id=\"top-row\">\n                        <h3 style={{textAlign:'center'}}>umich scheduler</h3>\n                        <Button variant=\"outlined\" color=\"primary\" startIcon={<GitHubIcon/>} onClick={this.showSource}>Source</Button>\n                    </div>\n                    \n                    {search_bar}\n                    \n                    {/*HEADER FOR SCROLLER*/}\n                    <hr/>\n                    \n                    {/* SCROLLER ITSELF*/}\n                    {class_btns}\n                    {back_btn}\n                    {displayed_scroller}\n\n                    <hr/>\n                    {/* BUTTONS FOR ADDING OR REMOVING A CLASS*/}\n                    {class_header}\n                    {lecture_choices}\n                    {disc_choices}\n                    {lab_choices}\n                    {sem_choices}\n                    {rec_choices}\n                    {add_rm_buttons}\n                    {del_btn}\n                </div>\n                <div className = \"right-div\">\n                    <TestCal\n                    selectedIntervals={this.state.selectedIntervals}\n                    onEventClick={this.handleEvClick}/>\n                    {nextprev}\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport Scroller from './scroller'\n//import Scroller from './scroller'\nimport 'react-week-calendar/dist/style.css';\nimport './App.css'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                {/*<div className=\"left-div\">\n                    <h3 style={{textAlign:'center'}}>test react-week-calendar</h3>\n                    <Scroller/>\n                </div>*/}\n                <Scroller/>\n            </div>\n        );\n    }\n}\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n)\n\n\n"],"sourceRoot":""}